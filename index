<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON String Converter & Formatter</title>
    
    <!-- External Dependencies -->
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #111827 0%, #374151 100%);
            --bg-gradient: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
            --primary-color: #111827;
            --primary-hover: #1f2937;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --text-light: #9ca3af;
            --border-color: #e5e7eb;
            --border-light: #f3f4f6;
            --bg-white: #ffffff;
            --bg-light: #f9fafb;
            --bg-gray: #f3f4f6;
            --bg-dark: #111827;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-hover: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --border-radius: 8px;
            --border-radius-lg: 12px;
            --border-radius-xl: 16px;
            --transition: all 0.2s ease;
        }

        /* Reset & Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Plus Jakarta Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            background: var(--bg-gradient);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
            color: var(--text-primary);
        }

        /* Layout Components */
        .main-container {
            max-width: 1400px;
            margin: 0 auto;
            background: var(--bg-white);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius-xl);
            box-shadow: var(--shadow-lg);
            overflow: hidden;
        }

        .header-section {
            background: var(--primary-gradient);
            color: white;
            padding: 32px;
            text-align: center;
            border-bottom: 1px solid var(--border-color);
        }

        .header-section h1 {
            font-size: 1.875rem;
            font-weight: 600;
            margin-bottom: 6px;
            letter-spacing: -0.03em;
        }

        .header-section p {
            font-size: 1rem;
            opacity: 0.85;
            font-weight: 400;
            letter-spacing: -0.01em;
        }

        .content-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            min-height: 600px;
        }

        /* Panel Styles */
        .panel {
            padding: 24px;
        }

        .input-panel {
            background: var(--bg-light);
            border-right: 1px solid var(--border-color);
        }

        .output-panel {
            background: var(--bg-white);
        }

        .panel-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
            letter-spacing: -0.02em;
        }

        /* Input Components */
        .input-area {
            margin-bottom: 20px;
        }

        .conversion-mode {
            display: flex;
            gap: 16px;
            margin-bottom: 12px;
            padding: 4px;
            background: var(--bg-white);
            border-radius: var(--border-radius);
            border: 1px solid var(--border-color);
        }

        .mode-toggle {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            transition: var(--transition);
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
        }

        .mode-toggle input[type="radio"] {
            display: none;
        }

        .mode-toggle input[type="radio"]:checked + span {
            color: var(--primary-color);
            font-weight: 600;
        }

        .mode-toggle:has(input[type="radio"]:checked) {
            background: var(--bg-light);
            color: var(--primary-color);
            box-shadow: var(--shadow-sm);
        }

        .input-textarea {
            width: 100%;
            min-height: 300px;
            padding: 16px;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            line-height: 1.6;
            resize: vertical;
            transition: var(--transition);
            background: var(--bg-white);
            color: var(--text-primary);
        }

        .input-textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(17, 24, 39, 0.1);
        }

        .input-textarea::placeholder {
            color: var(--text-light);
        }

        /* Button Components */
        .button-group {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            font-family: 'Plus Jakarta Sans', sans-serif;
            text-decoration: none;
            letter-spacing: -0.01em;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            box-shadow: var(--shadow-sm);
            font-weight: 500;
        }

        .btn-primary:hover {
            background: var(--primary-hover);
            box-shadow: var(--shadow-md);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: var(--bg-white);
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-sm);
        }

        .btn-secondary:hover {
            background: var(--bg-light);
            border-color: var(--primary-color);
            color: var(--text-primary);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        /* Tab Navigation */
        .view-tabs {
            display: flex;
            background: var(--bg-gray);
            border-radius: var(--border-radius);
            padding: 4px;
            margin-bottom: 16px;
            border: 1px solid var(--border-light);
        }

        .tab-btn {
            flex: 1;
            padding: 8px 16px;
            border: none;
            background: transparent;
            cursor: pointer;
            border-radius: 6px;
            font-weight: 500;
            transition: var(--transition);
            color: var(--text-secondary);
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .tab-btn.active {
            background: var(--bg-white);
            color: var(--primary-color);
            box-shadow: var(--shadow-sm);
            font-weight: 600;
        }

        /* Output Container */
        .output-container {
            background: var(--bg-white);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--shadow-sm);
            height: 400px;
            display: flex;
            flex-direction: column;
        }

        .output-header {
            background: var(--bg-gray);
            color: var(--text-primary);
            padding: 12px 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid var(--border-color);
            font-weight: 500;
        }

        .header-actions {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            background: var(--bg-white);
            border: 1px solid var(--border-color);
            color: var(--text-secondary);
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 4px;
            font-weight: 500;
        }

        .action-btn:hover {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .output-content {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            font-family: 'JetBrains Mono', monospace;
            font-size: 13px;
            line-height: 1.6;
            color: var(--text-primary);
            background: var(--bg-white);
        }

        .json-tree-content {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            font-family: 'JetBrains Mono', monospace;
            font-size: 13px;
            line-height: 1.6;
            background: var(--bg-white);
        }

        /* JSON Tree Styles */
        .json-toggle {
            cursor: pointer;
            user-select: none;
            display: inline-block;
            width: 16px;
            text-align: center;
            color: var(--text-light);
            font-weight: bold;
            transition: var(--transition);
        }

        .json-toggle:hover {
            color: var(--primary-color);
        }

        .json-key-node { color: #0f766e; font-weight: 600; }
        .json-string-node { color: #059669; }
        .json-number-node { color: #dc2626; }
        .json-boolean-node { color: #7c3aed; font-weight: 500; }
        .json-null-node { color: var(--text-light); font-style: italic; }
        .json-bracket { color: var(--text-primary); font-weight: bold; }
        .json-comma { color: var(--text-light); }
        .json-count { color: var(--text-light); font-size: 11px; }

        .json-children {
            margin-left: 20px;
            border-left: 1px solid var(--border-light);
            padding-left: 12px;
            margin-top: 4px;
        }

        .json-line {
            padding: 2px 0;
            border-radius: 4px;
            transition: var(--transition);
        }

        .json-line:hover {
            background: var(--bg-light);
        }

        /* Syntax highlighting for code view */
        .json-key { color: #0f766e; font-weight: 600; }
        .json-string { color: #059669; }
        .json-number { color: #dc2626; }
        .json-boolean { color: #7c3aed; }
        .json-null { color: var(--text-light); }

        /* Status Messages */
        .status-card {
            padding: 12px 16px;
            border-radius: var(--border-radius);
            margin: 16px 0;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .status-success {
            background: #f0fdf4;
            color: #166534;
            border: 1px solid #bbf7d0;
        }

        .status-error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }

        .empty-state {
            text-align: center;
            color: var(--text-light);
            padding: 40px 20px;
            font-style: italic;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .content-grid {
                grid-template-columns: 1fr;
            }
            
            .input-panel {
                border-right: none;
                border-bottom: 1px solid var(--border-color);
            }
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            .main-container {
                border-radius: var(--border-radius);
            }
            
            .header-section {
                padding: 24px 20px;
            }
            
            .header-section h1 {
                font-size: 2rem;
            }
            
            .panel {
                padding: 16px;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }
        }

        /* Utilities */
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <header class="header-section">
            <h1>JSON String Converter & Formatter</h1>
            <p>Convert escaped JSON strings to valid JSON and visualize them beautifully</p>
        </header>
        
        <main class="content-grid">
            <!-- Input Panel -->
            <section class="panel input-panel">
                <h2 class="panel-title">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
                        <path d="m15 5 4 4"/>
                    </svg>
                    Input JSON String
                </h2>
                
                <div class="input-area">
                    <div class="conversion-mode">
                        <label class="mode-toggle">
                            <input type="radio" name="conversionMode" value="stringToJson" checked>
                            <span>String → JSON</span>
                        </label>
                        <label class="mode-toggle">
                            <input type="radio" name="conversionMode" value="jsonToString">
                            <span>JSON → String</span>
                        </label>
                    </div>
                    
                    <textarea 
                        id="inputText" 
                        class="input-textarea"
                        placeholder='Paste your JSON string here (e.g., "{\"name\":\"John\",\"age\":30}")...'
                        aria-label="JSON input"
                    ></textarea>
                </div>
                
                <div class="button-group">
                    <button class="btn btn-primary" onclick="app.convertAndFormat()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="16 3 21 3 21 8"/>
                            <line x1="4" y1="20" x2="21" y2="3"/>
                            <polyline points="21 16 21 21 16 21"/>
                            <line x1="15" y1="15" x2="21" y2="21"/>
                            <line x1="4" y1="4" x2="9" y2="9"/>
                        </svg>
                        Convert
                    </button>
                    <button class="btn btn-secondary" onclick="app.clearAll()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M3 6h18"/>
                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
                        </svg>
                        Clear All
                    </button>
                    <button class="btn btn-secondary" onclick="app.loadExample()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                            <polyline points="14,2 14,8 20,8"/>
                            <line x1="16" y1="13" x2="8" y2="13"/>
                            <line x1="16" y1="17" x2="8" y2="17"/>
                            <polyline points="10,9 9,9 8,9"/>
                        </svg>
                        Load Example
                    </button>
                </div>

                <div id="statusContainer" aria-live="polite"></div>
            </section>

            <!-- Output Panel -->
            <section class="panel output-panel">
                <h2 class="panel-title">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                        <circle cx="12" cy="12" r="3"/>
                    </svg>
                    Formatted JSON Output
                </h2>
                
                <nav class="view-tabs">
                    <button class="tab-btn active" onclick="app.switchView('tree')" aria-pressed="true">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
                            <circle cx="12" cy="10" r="3"/>
                        </svg>
                        Tree View
                    </button>
                    <button class="tab-btn" onclick="app.switchView('code')" aria-pressed="false">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="16 18 22 12 16 6"/>
                            <polyline points="8 6 2 12 8 18"/>
                        </svg>
                        Code View
                    </button>
                </nav>
                
                <!-- Tree View -->
                <div class="output-container" id="treeViewContainer">
                    <div class="output-header">
                        <span>Interactive JSON Tree</span>
                        <div class="header-actions">
                            <button class="action-btn" onclick="app.expandAll()" title="Expand all nodes">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="7 13 12 18 17 13"/>
                                    <polyline points="7 6 12 11 17 6"/>
                                </svg>
                                Expand All
                            </button>
                            <button class="action-btn" onclick="app.collapseAll()" title="Collapse all nodes">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polyline points="17 11 12 6 7 11"/>
                                    <polyline points="17 18 12 13 7 18"/>
                                </svg>
                                Collapse All
                            </button>
                            <button class="action-btn" onclick="app.copyOutput()" title="Copy JSON to clipboard">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                                </svg>
                                Copy
                            </button>
                        </div>
                    </div>
                    <div class="json-tree-content" id="treeContent">
                        <div class="empty-state">Your JSON tree will appear here...</div>
                    </div>
                </div>

                <!-- Code View -->
                <div class="output-container hidden" id="codeViewContainer">
                    <div class="output-header">
                        <span>Formatted JSON Code</span>
                        <div class="header-actions">
                            <button class="action-btn" onclick="app.copyOutput()" title="Copy JSON to clipboard">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                                </svg>
                                Copy
                            </button>
                        </div>
                    </div>
                    <div class="output-content" id="outputContent">
                        <div class="empty-state">Your formatted JSON will appear here...</div>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <script>
        // Application State and Main Logic
        const app = {
            state: {
                currentJsonData: null,
                currentView: 'tree',
                conversionMode: 'stringToJson'
            },

            // DOM Elements Cache
            elements: {
                get inputText() { return document.getElementById('inputText'); },
                get statusContainer() { return document.getElementById('statusContainer'); },
                get treeContent() { return document.getElementById('treeContent'); },
                get outputContent() { return document.getElementById('outputContent'); },
                get treeViewContainer() { return document.getElementById('treeViewContainer'); },
                get codeViewContainer() { return document.getElementById('codeViewContainer'); },
                get tabBtns() { return document.querySelectorAll('.tab-btn'); },
                get conversionModeInputs() { return document.querySelectorAll('input[name="conversionMode"]'); }
            },

            // Utility Functions
            utils: {
                escapeHtml(text) {
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                },

                generateId() {
                    return 'toggle-' + Math.random().toString(36).substr(2, 9);
                },

                debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }
            },

            // Status Management
            showStatus(message, type) {
                const successIcon = `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="20 6 9 17 4 12"/>
                </svg>`;
                const errorIcon = `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"/>
                    <line x1="15" y1="9" x2="9" y2="15"/>
                    <line x1="9" y1="9" x2="15" y2="15"/>
                </svg>`;
                
                const icon = type === 'success' ? successIcon : errorIcon;
                const statusClass = type === 'success' ? 'status-success' : 'status-error';
                
                this.elements.statusContainer.innerHTML = `
                    <div class="status-card ${statusClass}">
                        ${icon}
                        ${message}
                    </div>
                `;
                
                setTimeout(() => {
                    this.elements.statusContainer.innerHTML = '';
                }, 5000);
            },

            // View Management
            switchView(view) {
                this.state.currentView = view;
                const { treeViewContainer, codeViewContainer, tabBtns } = this.elements;
                
                // Reset tab states
                tabBtns.forEach((btn, index) => {
                    btn.classList.remove('active');
                    btn.setAttribute('aria-pressed', 'false');
                });
                
                if (view === 'tree') {
                    treeViewContainer.classList.remove('hidden');
                    codeViewContainer.classList.add('hidden');
                    tabBtns[0].classList.add('active');
                    tabBtns[0].setAttribute('aria-pressed', 'true');
                } else {
                    treeViewContainer.classList.add('hidden');
                    codeViewContainer.classList.remove('hidden');
                    tabBtns[1].classList.add('active');
                    tabBtns[1].setAttribute('aria-pressed', 'true');
                }
            },

            // JSON Tree Generation
            createJsonTree(data, key = null, level = 0) {
                const isRoot = key === null;
                let html = '';
                
                if (Array.isArray(data)) {
                    html += this.createArrayNode(data, key, isRoot);
                } else if (typeof data === 'object' && data !== null) {
                    html += this.createObjectNode(data, key, isRoot);
                } else {
                    html += this.createPrimitiveNode(data, key);
                }
                
                return html;
            },

            createArrayNode(data, key, isRoot) {
                const toggleId = this.utils.generateId();
                let html = '<div class="json-line">';
                
                if (!isRoot) {
                    html += `<span class="json-key-node">"${this.utils.escapeHtml(key)}"</span>: `;
                }
                
                if (data.length > 0) {
                    html += `<span class="json-toggle" onclick="app.toggleNode('${toggleId}')">▼</span>`;
                }
                
                html += '<span class="json-bracket">[</span>';
                
                if (data.length > 0) {
                    html += ` <span class="json-count">${data.length} items</span>`;
                    html += `</div><div class="json-children" id="${toggleId}">`;
                    
                    data.forEach((item, index) => {
                        html += '<div class="json-node">';
                        html += this.createJsonTree(item, index, 1);
                        if (index < data.length - 1) {
                            html += '<span class="json-comma">,</span>';
                        }
                        html += '</div>';
                    });
                    
                    html += '</div>';
                } else {
                    html += '</div>';
                }
                
                html += '<div class="json-line"><span class="json-bracket">]</span></div>';
                return html;
            },

            createObjectNode(data, key, isRoot) {
                const keys = Object.keys(data);
                const toggleId = this.utils.generateId();
                let html = '<div class="json-line">';
                
                if (!isRoot) {
                    html += `<span class="json-key-node">"${this.utils.escapeHtml(key)}"</span>: `;
                }
                
                if (keys.length > 0) {
                    html += `<span class="json-toggle" onclick="app.toggleNode('${toggleId}')">▼</span>`;
                }
                
                html += '<span class="json-bracket">{</span>';
                
                if (keys.length > 0) {
                    html += ` <span class="json-count">${keys.length} keys</span>`;
                    html += `</div><div class="json-children" id="${toggleId}">`;
                    
                    keys.forEach((objKey, index) => {
                        html += '<div class="json-node">';
                        html += this.createJsonTree(data[objKey], objKey, 1);
                        if (index < keys.length - 1) {
                            html += '<span class="json-comma">,</span>';
                        }
                        html += '</div>';
                    });
                    
                    html += '</div>';
                } else {
                    html += '</div>';
                }
                
                html += '<div class="json-line"><span class="json-bracket">}</span></div>';
                return html;
            },

            createPrimitiveNode(data, key) {
                let html = '<div class="json-line">';
                
                if (key !== null && !Number.isInteger(key)) {
                    html += `<span class="json-key-node">"${this.utils.escapeHtml(key)}"</span>: `;
                } else if (Number.isInteger(key)) {
                    html += `<span class="json-count">[${key}]</span> `;
                }
                
                if (typeof data === 'string') {
                    html += `<span class="json-string-node">"${this.utils.escapeHtml(data)}"</span>`;
                } else if (typeof data === 'number') {
                    html += `<span class="json-number-node">${data}</span>`;
                } else if (typeof data === 'boolean') {
                    html += `<span class="json-boolean-node">${data}</span>`;
                } else if (data === null) {
                    html += '<span class="json-null-node">null</span>';
                }
                
                html += '</div>';
                return html;
            },

            // Tree Navigation
            toggleNode(toggleId) {
                const element = document.getElementById(toggleId);
                const toggle = element.previousElementSibling.querySelector('.json-toggle');
                
                if (element.style.display === 'none') {
                    element.style.display = 'block';
                    toggle.textContent = '▼';
                } else {
                    element.style.display = 'none';
                    toggle.textContent = '▶';
                }
            },

            expandAll() {
                const children = document.querySelectorAll('.json-children');
                const toggles = document.querySelectorAll('.json-toggle');
                
                children.forEach(child => child.style.display = 'block');
                toggles.forEach(toggle => toggle.textContent = '▼');
            },

            collapseAll() {
                const children = document.querySelectorAll('.json-children');
                const toggles = document.querySelectorAll('.json-toggle');
                
                children.forEach(child => child.style.display = 'none');
                toggles.forEach(toggle => toggle.textContent = '▶');
            },

            // Syntax Highlighting
            syntaxHighlight(json) {
                if (typeof json !== 'string') {
                    json = JSON.stringify(json, null, 2);
                }
                
                json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                
                return json.replace(
                    /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,
                    (match) => {
                        let cls = 'json-number';
                        if (/^"/.test(match)) {
                            cls = /:$/.test(match) ? 'json-key' : 'json-string';
                        } else if (/true|false/.test(match)) {
                            cls = 'json-boolean';
                        } else if (/null/.test(match)) {
                            cls = 'json-null';
                        }
                        return `<span class="${cls}">${match}</span>`;
                    }
                );
            },

            // JSON Parsing
            parseJsonString(input) {
                input = input.trim();
                
                // Try direct parsing first
                if ((input.startsWith('{') && input.endsWith('}')) || 
                    (input.startsWith('[') && input.endsWith(']'))) {
                    try {
                        return JSON.parse(input);
                    } catch (e) {
                        // Continue to string processing
                    }
                }
                
                // Handle quoted strings
                if ((input.startsWith('"') && input.endsWith('"')) ||
                    (input.startsWith("'") && input.endsWith("'"))) {
                    input = input.slice(1, -1);
                }
                
                // Unescape sequences
                input = input
                    .replace(/\\"/g, '"')
                    .replace(/\\'/g, "'")
                    .replace(/\\n/g, '\n')
                    .replace(/\\r/g, '\r')
                    .replace(/\\t/g, '\t')
                    .replace(/\\f/g, '\f')
                    .replace(/\\b/g, '\b')
                    .replace(/\\\\/g, '\\');
                
                return JSON.parse(input);
            },

            // Main Actions
            convertAndFormat() {
                const input = this.elements.inputText.value.trim();
                
                if (!input) {
                    this.showStatus('Please enter some content to convert', 'error');
                    return;
                }

                try {
                    if (this.state.conversionMode === 'stringToJson') {
                        this.convertStringToJson(input);
                    } else {
                        this.convertJsonToString(input);
                    }
                } catch (error) {
                    const errorMsg = `Error: ${error.message}`;
                    this.elements.treeContent.innerHTML = `<div class="empty-state" style="color: #ef4444;">${errorMsg}</div>`;
                    this.elements.outputContent.innerHTML = `<div class="empty-state" style="color: #ef4444;">${errorMsg}</div>`;
                    this.showStatus('Invalid input format. Please check your content.', 'error');
                }
            },

            convertStringToJson(input) {
                const jsonObj = this.parseJsonString(input);
                this.state.currentJsonData = jsonObj;

                // Update tree view
                const treeHtml = this.createJsonTree(jsonObj);
                this.elements.treeContent.innerHTML = treeHtml;

                // Update code view
                const formatted = JSON.stringify(jsonObj, null, 2);
                const highlighted = this.syntaxHighlight(formatted);
                this.elements.outputContent.innerHTML = highlighted;
                
                this.showStatus('JSON string successfully converted and formatted!', 'success');
            },

            convertJsonToString(input) {
                // Parse the JSON object
                const jsonObj = JSON.parse(input);
                
                // Convert to escaped JSON string
                const jsonString = JSON.stringify(jsonObj);
                const escapedString = JSON.stringify(jsonString);
                
                this.state.currentJsonData = escapedString;

                // Show the escaped string in tree view as a simple string display
                this.elements.treeContent.innerHTML = `
                    <div class="json-line">
                        <span class="json-string-node">${this.utils.escapeHtml(escapedString)}</span>
                    </div>
                `;

                // Show the escaped string in code view
                this.elements.outputContent.innerHTML = this.utils.escapeHtml(escapedString);
                
                this.showStatus('JSON object successfully converted to escaped string!', 'success');
            },

            clearAll() {
                this.elements.inputText.value = '';
                this.elements.treeContent.innerHTML = '<div class="empty-state">Your JSON tree will appear here...</div>';
                this.elements.outputContent.innerHTML = '<div class="empty-state">Your formatted JSON will appear here...</div>';
                this.elements.statusContainer.innerHTML = '';
                this.state.currentJsonData = null;
            },

            loadExample() {
                if (this.state.conversionMode === 'stringToJson') {
                    const example = '"{\\\"user\\\":{\\\"id\\\":123,\\\"profile\\\":{\\\"firstName\\\":\\\"Jane\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"jane@example.com\\\",\\\"preferences\\\":{\\\"theme\\\":\\\"dark\\\",\\\"notifications\\\":true}}},\\\"orders\\\":[{\\\"orderId\\\":\\\"ORD-001\\\",\\\"items\\\":[{\\\"name\\\":\\\"Laptop\\\",\\\"price\\\":999.99,\\\"quantity\\\":1},{\\\"name\\\":\\\"Mouse\\\",\\\"price\\\":29.99,\\\"quantity\\\":2}],\\\"total\\\":1059.97,\\\"shipped\\\":true},{\\\"orderId\\\":\\\"ORD-002\\\",\\\"items\\\":[{\\\"name\\\":\\\"Keyboard\\\",\\\"price\\\":79.99,\\\"quantity\\\":1}],\\\"total\\\":79.99,\\\"shipped\\\":false}]}"';
                    this.elements.inputText.value = example;
                    this.showStatus('Example JSON string loaded! Click "Convert" to see it formatted.', 'success');
                } else {
                    const example = `{
  "user": {
    "id": 123,
    "profile": {
      "firstName": "Jane",
      "lastName": "Smith",
      "email": "jane@example.com",
      "preferences": {
        "theme": "dark",
        "notifications": true
      }
    }
  },
  "orders": [
    {
      "orderId": "ORD-001",
      "items": [
        {
          "name": "Laptop",
          "price": 999.99,
          "quantity": 1
        },
        {
          "name": "Mouse",
          "price": 29.99,
          "quantity": 2
        }
      ],
      "total": 1059.97,
      "shipped": true
    }
  ]
}`;
                    this.elements.inputText.value = example;
                    this.showStatus('Example JSON object loaded! Click "Convert" to see it as an escaped string.', 'success');
                }
            },

            async copyOutput() {
                if (!this.state.currentJsonData) {
                    this.showStatus('No data to copy', 'error');
                    return;
                }
                
                let text;
                if (this.state.conversionMode === 'stringToJson') {
                    text = JSON.stringify(this.state.currentJsonData, null, 2);
                } else {
                    text = this.state.currentJsonData; // Already a string
                }
                
                try {
                    await navigator.clipboard.writeText(text);
                    this.showStatus('Content copied to clipboard!', 'success');
                } catch (err) {
                    this.showStatus('Failed to copy to clipboard', 'error');
                }
            },

            updatePlaceholder() {
                const textarea = this.elements.inputText;
                if (this.state.conversionMode === 'stringToJson') {
                    textarea.placeholder = 'Paste your JSON string here (e.g., "{\\"name\\":\\"John\\",\\"age\\":30}")...';
                } else {
                    textarea.placeholder = 'Paste your JSON object here (e.g., {"name":"John","age":30})...';
                }
            },

            onModeChange() {
                const selectedMode = document.querySelector('input[name="conversionMode"]:checked').value;
                this.state.conversionMode = selectedMode;
                this.updatePlaceholder();
                this.clearAll();
            },

            // Initialize the application
            init() {
                // Mode change listeners
                this.elements.conversionModeInputs.forEach(input => {
                    input.addEventListener('change', () => this.onModeChange());
                });

                // Keyboard shortcuts
                this.elements.inputText.addEventListener('keydown', (e) => {
                    if (e.ctrlKey && e.key === 'Enter') {
                        this.convertAndFormat();
                    }
                });

                // Auto-resize textarea
                this.elements.inputText.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = Math.max(300, this.scrollHeight) + 'px';
                });

                // Set initial state
                this.updatePlaceholder();

                console.log('JSON Converter initialized successfully');
            }
        };

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            app.init();
        });
    </script>
</body>
</html>
